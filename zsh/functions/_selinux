#compdef setsebool getsebool setenforce
# thank god i don't have to deal with this often.

_sebooleans() {
  # use local, typeset or etc to scope `selinux_booleans' in the calling function.
  # this prevents the array from staying defined after compsys is done.
  typeset -Ag selinux_booleans
  selinux_booleans=( ${$(getsebool -a)#-->} )
}

_setsebool() {
  local state state_descr context expl line ret
  typeset -A opt_args val_args selinux_booleans

  _arguments : \
    '-P[set permanently]' '-V[verbose]' \
    '*: :->booleans'

  if [[ $state == booleans ]]; then
    local -a args; local k v

    _sebooleans
    for k v in ${(kv)selinux_booleans}; do
      args+=( "$k:boolean $k (currently $v):"'(1 0)' )
    done

    _values -w 'selinux booleans' "$args[@]"
  fi
}

_getsebool() {
  local state state_descr context expl line ret
  typeset -A opt_args selinux_booleans

  _sebooleans
  _arguments : \
    '(*)-a[print all booleans]' \
    '(-a)*:selinux booleans:( ${(k)selinux_booleans} )'
}

_setenforce() {
  _arguments -M 'M:{[:upper:][:lower:]}={[:lower:][:upper:]}' \
    '1:SELinux mode:((
      enforcing\:enforcing permissive\:permissive
      1\:enforcing 0\:permissive
    ))'
}

_selinux() {
  local ret
  _call_function ret _$service
  return ret
}
_selinux "$@"

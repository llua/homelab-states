#compdef setsebool getsebool setenforce seinfo
# thank god i don't have to deal with this often.

_sebooleans() {
  # use local, typeset or etc to scope `selinux_booleans' in the calling function.
  # this prevents the array from staying defined after compsys is done.
  typeset -Ag selinux_booleans
  selinux_booleans=( ${$(getsebool -a)#-->} )
}

_setsebool() {
  local state state_descr context expl line ret
  typeset -A opt_args val_args selinux_booleans

  _arguments : \
    '-P[set permanently]' '-V[verbose]' \
    '*: :->booleans'

  if [[ $state == booleans ]]; then
    local -a args; local k v

    _sebooleans
    for k v in ${(kv)selinux_booleans}; do
      args+=( "$k:boolean $k (currently $v):"'(1 0)' )
    done

    _values -w 'selinux booleans' "$args[@]"
  fi
}

_getsebool() {
  local state state_descr context expl line ret
  typeset -A opt_args selinux_booleans

  _sebooleans
  _arguments : \
    '(*)-a[print all booleans]' \
    '(-a)*:selinux booleans:( ${(k)selinux_booleans} )'
}

_setenforce() {
  _arguments -M 'M:{[:upper:][:lower:]}={[:lower:][:upper:]}' \
    '1:SELinux mode:((
      enforcing\:enforcing permissive\:permissive
      1\:enforcing 0\:permissive
    ))'
}

_seinfo() {
  _arguments -A '-*' : \
    {-c-,--class=}'[display a list of object classes]:object class' \
    '--sensitivity=[display a list of sensitivities]:sensitivity' \
    '--category=[display a list of categories]:category' \
    {-t-,--type=}'[display a list of types]:type' \
    {-a-,--attribute=}'[display a list of attributes]:attributes' \
    {-r-,--role=}'[display a list of roles]' \
    {-u-,--user=}'[display a list of users]' \
    {-b-,--bool=}'[display a list of booleans]' \
    '--initialsid=[display a list of initial SIDs]' \
    '--fs_use=[display a list of fs_use statements]:filesystem type' \
    '--genfscon=[display a list of genfscon statements]:filesystem type' \
    '--netifcon=[display a list of netif contexts]:interface:_net_interfaces' \
    '--netcon=[display a list of node contexts]:node address' \
    '--polcap[display policy capabilities]' \
    '--permissive[display permissive types]' \
    '--portcon=[display a list of port contexts]:port' \
    '--portocol=[display only portcon statements for the specified protocol]:protocol' \
    '--constrain[display a list of constraints]' \
    '--all[display all components]' \
    '(-x --expand)'{-x,--expand}'[display additional details]' \
    '--stats[display policy statistics]' \
    '(-l --line-breaks)'{-l,--line-breaks}'[print line breaks when displaying constraint statements]' \
    '(-h --help)'{-h,--help}'[display help information and exit]' \
    '(-v --version)'{-v,--version}'[display version information and exit]'
}

_selinux() {
  local ret
  _call_function ret _$service
  return ret
}
_selinux "$@"
